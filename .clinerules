# 📋 .clinerules

## 📐 プロジェクト管理ルール

### 仕様管理
- 仕様を`spec.md`に記載します
- プロジェクト開始時に`spec.md`がない場合は作成します
- 仕様変更が必要な場合は、必ず`spec.md`を確認します
- `spec.md`の変更が必要になった場合は、必ず編集してから実装を行います

### 開発計画管理
- 開発ロードマップと進捗チェックを`roadmap.md`に記載します
- プロジェクト開始時に`roadmap.md`がない場合は作成します
- 仕様及び開発プランの変更が必要な場合は、必ず`roadmap.md`を編集してから実装を行います
- 開発は`roadmap.md`を参照して順序立てて行います

---

## 🔒 セキュリティルール

### 機密情報の管理
- コード作成時は必ずセキュリティリスクがないか確認します
- 以下の機密情報はすべて`.env`で管理し、プログラム内で直接記述しません：
  - API Key / Secret Key
  - アクセストークン / リフレッシュトークン
  - データベース接続情報（ホスト、ユーザー名、パスワード）
  - AWS リソースID（Knowledge Base ID、User Pool IDなど）
  - IP アドレス（許可・制限リスト）
  - アカウント名・アカウントID
  - 内部URL・エンドポイント
- 環境変数は`process.env.VARIABLE_NAME`または`os.getenv('VARIABLE_NAME')`で呼び出します
- `.env`は`.gitignore`に記述してGit管理外とします
- `.env.example`を作成し、必要な環境変数の構造を文書化します
- `.gitignore`の変更時はユーザーに許可を取ります

### 入力検証とサニタイゼーション
- すべてのユーザー入力は検証とサニタイゼーションを行います
- XSS対策: HTMLエスケープを必ず実施します
- SQLインジェクション対策: パラメータ化クエリを使用します
- パス トラバーサル対策: ファイルパスの検証を行います
- 入力長制限を設定し、バッファオーバーフローを防ぎます

---

## 📝 コーディング規約

### 命名規則
- **変数・関数**: camelCase（例: `getUserData`, `isActive`）
- **定数**: UPPER_SNAKE_CASE（例: `MAX_RETRY_COUNT`, `API_BASE_URL`）
- **クラス・コンポーネント**: PascalCase（例: `UserProfile`, `ChatMessage`）
- **ファイル名**: kebab-case（例: `user-profile.tsx`, `api-client.ts`）
- **型定義**: PascalCase + 接尾辞（例: `UserDataType`, `ApiResponseInterface`）
- 意味のある名前を使用し、省略形は避けます（例: `userData` ✅ / `usrDt` ❌）

### コメント規則
- **関数**: JSDoc形式で説明、引数、戻り値を記述します
  ```typescript
  /**
   * ユーザー情報を取得する
   * @param userId - ユーザーID
   * @returns ユーザー情報オブジェクト
   * @throws {Error} ユーザーが見つからない場合
   */
  ```
- **複雑なロジック**: 処理の意図を日本語で説明します
- **TODO/FIXME**: 課題や改善点を明記します（例: `// TODO: エラーハンドリングを追加`）
- **セキュリティ関連**: `// SECURITY:` プレフィックスで注意喚起します

### ファイル構成
- 1ファイルは300行以内を目安とします（超える場合は分割を検討）
- 機能ごとにディレクトリを分けます
- `index.ts`でエクスポートをまとめ、インポートパスを簡潔にします

---

## 🛡️ エラーハンドリング

### 例外処理
- すべての非同期処理は`try-catch`または`.catch()`でエラーハンドリングします
- エラーメッセージは具体的かつユーザーフレンドリーにします
- 本番環境ではスタックトレースを公開しません
- エラーログは構造化し、CloudWatch Logsなどに記録します

### エラーレスポンス
- 統一されたエラーレスポンス形式を使用します：
  ```typescript
  {
    "error": "エラーの種類",
    "message": "ユーザー向けメッセージ",
    "code": "ERROR_CODE",
    "timestamp": "2025-01-02T10:00:00Z"
  }
  ```

---

## 🧪 テストルール

### テスト必須項目
- 認証・認可機能のテストを必ず実装します
- API エンドポイントの正常系・異常系テストを作成します
- セキュリティ関連機能（入力検証、XSS対策など）のテストを優先します

### テストファイル命名
- `*.test.ts` または `*.spec.ts` の形式を使用します
- テスト対象ファイルと同じディレクトリまたは`__tests__`ディレクトリに配置します

---

## 📦 依存関係管理

### パッケージ管理
- 使用するパッケージは最新の安定版を使用します
- セキュリティ脆弱性が報告されているパッケージは使用しません
- 不要な依存関係は追加しません（バンドルサイズ削減）
- `package.json`の`dependencies`と`devDependencies`を適切に分けます

### バージョン管理
- セマンティックバージョニングに従います
- メジャーバージョンアップ時はユーザーに確認します
- `package-lock.json`または`yarn.lock`をコミットします

---

## 🔄 Git ルール

### コミットメッセージ
- Conventional Commits形式に従います：
  ```
  <type>(<scope>): <subject>
  
  <body>
  
  <footer>
  ```
- **type**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- **例**: `feat(auth): Cognito認証機能を追加`

### ブランチ戦略
- `main`: 本番環境
- `develop`: 開発環境
- `feature/*`: 機能開発
- `hotfix/*`: 緊急修正

### プルリクエスト
- PR作成前に自己レビューを実施します
- PR説明に変更内容と影響範囲を明記します
- マージ前にテストが通ることを確認します

---

## 🎨 フロントエンド規約

### React/Next.js
- 関数コンポーネントとHooksを使用します（クラスコンポーネントは使用しません）
- コンポーネントは単一責任の原則に従います
- カスタムHooksで状態ロジックを再利用します
- propsは型定義します（TypeScript）

### CSS/スタイリング
- Tailwind CSSのユーティリティクラスを優先します
- カスタムCSSは`module.css`で管理します
- !importantの使用は避けます

---

## ⚙️ バックエンド規約

### API設計
- RESTful APIの原則に従います
- エンドポイントは名詞で表現します（例: `/users`, `/chat-sessions`）
- HTTPメソッドを適切に使用します（GET, POST, PUT, DELETE）
- ステータスコードを正しく返します（200, 201, 400, 401, 404, 500など）

### Lambda関数
- 1関数1責任の原則に従います
- タイムアウトは適切に設定します（デフォルト3秒は短すぎる場合が多い）
- メモリは必要最小限に設定します
- 環境変数で設定可能な項目はハードコードしません

---

## 📊 パフォーマンス

### 最適化
- 不要なレンダリングを避けます（React.memo, useMemo, useCallback）
- 画像は最適化します（WebP形式、遅延読み込み）
- API レスポンスはキャッシュを活用します
- データベースクエリはインデックスを活用します

---

## 📚 ドキュメント

### 必須ドキュメント
- `README.md`: プロジェクト概要、セットアップ手順
- `spec.md`: 詳細仕様
- `roadmap.md`: 開発計画と進捗
- `CHANGELOG.md`: 変更履歴
- `.env.example`: 環境変数テンプレート

### コード内ドキュメント
- 複雑な処理には説明コメントを追加します
- APIエンドポイントはSwagger/OpenAPIで文書化します
- 型定義にはコメントで説明を追加します

---

## ⚠️ 実装前確認事項

実装開始前に以下を必ず確認します：
1. ✅ `spec.md`と`roadmap.md`の内容を理解している
2. ✅ セキュリティリスクを検討している
3. ✅ 環境変数で管理すべき情報を特定している
4. ✅ エラーハンドリング方針を決定している
5. ✅ テスト方針を決定している

---

## 🚫 禁止事項

以下は**絶対に実行しません**：
- ❌ 機密情報をコードに直接記述する
- ❌ `.env`ファイルをGitにコミットする
- ❌ ユーザー入力を検証せずに使用する
- ❌ エラーを無視する（空のcatchブロック）
- ❌ console.logを本番コードに残す（開発時のみ使用）
- ❌ ハードコードされたURL、パス、設定値
- ❌ 未使用のコード・コメントアウトコードを残す

---

## 🔍 コードレビュー観点

自己レビュー時の確認項目：
- [ ] セキュリティリスクはないか
- [ ] 環境変数を適切に使用しているか
- [ ] エラーハンドリングは適切か
- [ ] コメントは十分か
- [ ] 命名規則に従っているか
- [ ] テストは十分か
- [ ] パフォーマンスに問題はないか
- [ ] ドキュメント更新は必要ないか

---

## 📝 変更履歴

このルールファイル自体も変更管理します：
- 重要な変更はユーザーに報告します
- 変更理由を記録します
- バージョン番号を付けます（例: v1.0.0）

---

**このルールに従わないコードは実装しません。疑問点があればユーザーに確認します。**